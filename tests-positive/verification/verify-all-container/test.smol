package test;
import core;

union Map[#K, #V | #K is core:Eq[#K], #V is core:Eq[#V]] is core:Eq[Map[#K, #V]] {
	var empty Unit;
	var addition core:Pair[core:Pair[#K, #V], Map[#K, #V]];

	method valid() Boolean {
		return true;
	}

	// RETURNS true when the maps have the same contents AND structure.
	// This is because matching is (unfortunately) NOT private.
	method eq(other Map[#K, #V]) Boolean {
		match this {
			case e1 empty {
				match other {
					case e2 empty {
						return true;
					}
					case a2 addition {
						return false;
					}
				}
			}
			case a1 addition {
				match other {
					case e2 empty {
						return false;
					}
					case a2 addition {
						return a1 == a2;
					}
				}
			}
		}
	}

	// RETURNS an empty map
	static makeEmpty() Map[#K, #V]
	ensures return is empty {
		return new(empty = unit);
	}

	// RETURNS a map without the key
	method get(key #K) core:Option[#V]
	ensures return is none when this is empty
	ensures return is some when (this is addition).and(this.addition.getLeft().getLeft() == key)
	ensures return == this.addition.getRight().get(key)
	when (this is addition).and((this.addition.getLeft().getLeft() == (key)).not())
	{
		match this {
			case e empty {
				return core:Option[#V].makeNone();
			}
			case a addition {
				if a.getLeft().getLeft() == key {
					return core:Option[#V].makeSome(a.getLeft().getRight());
				}
				return a.getRight().get(key);
			}
		}
	}
}

class Test {
	static main!() Unit {
	}
}
