package test;
import core;

class MinBinaryHeap[#T | #T is core:Orderable, #T is core:Showable] {
	var sequence core:Array[#T];

	static makeEmpty() MinBinaryHeap[#T] {
		return new(sequence = core:Array[#T].make());
	}

	static make(sequence core:Array[#T]) MinBinaryHeap[#T] {
		return new(sequence = sequence);
	}

	static heapProperty(sequence core:Array[#T]) Boolean {
		return true;
	}

	static zLeftChild(index Int) Int {
		return (index * 2) + 1;
	}
	static zRightChild(index Int) Int {
		return (index * 2) + 2;
	}
	static zParent(index Int) Int {
		return (index - 1) / 2;
	}

	static bubbleUp(list core:Array[#T], index Int) core:Array[#T] {
		if index == 0 {
			return list;
		}

		var parentIndex Int = MinBinaryHeap[#T].zParent(index);

		if list.get(index) < list.get(parentIndex) {
			//do core:Out.println!("-> swap");
			return MinBinaryHeap[#T].bubbleUp(list.swap(index, parentIndex), parentIndex);
		}
		return list;
	}

	static bubbleDown(list core:Array[#T], index Int) core:Array[#T] {
		var a Int = MinBinaryHeap[#T].zLeftChild(index);
		var b Int = MinBinaryHeap[#T].zRightChild(index);
		if (list.size() - 1) < a {
			return list;
		} elseif (list.size() - 1) < b {
			if list.get(a) < list.get(index) {
				return MinBinaryHeap[#T].bubbleDown(list.swap(index, a), a);
			}
			return list;
		}

		if list.get(a) < list.get(b) {
			if list.get(a) < list.get(index) {
				return MinBinaryHeap[#T].bubbleDown(list.swap(index, a), a);
			}
			return list;
		} else {
			if list.get(b) < list.get(index) {
				return MinBinaryHeap[#T].bubbleDown(list.swap(index, b), b);
			}
			return list;
		}
	}

	method insert(value #T) MinBinaryHeap[#T] {
		var modified core:Array[#T] = this.sequence.append(value);
		modified = MinBinaryHeap[#T].bubbleUp(modified, modified.size() - 1);
		return MinBinaryHeap[#T].make(modified);
	}

	method remove() MinBinaryHeap[#T], #T {
		return MinBinaryHeap[#T].make(MinBinaryHeap[#T].bubbleDown(this.sequence.swap(0, this.sequence.size()-1).pop(), 0)), this.sequence.get(0);
	}
}

class N is core:Orderable, core:Showable {
	var value Int;

	static make(value Int) N {
		return new(value = value);
	}

	method lessThan(other N) Boolean {
		return this.value.lessThan(other.value);
	}

	// RETURNS the value this represents
	method get() Int {
		return this.value;
	}

	static showType() String {
		return "test:N";
	}

	method show() String {
		return core:ASCII.formatInt(this.value);
	}
}

class Test {
	static main!() Unit {
		var heap MinBinaryHeap[N] = MinBinaryHeap[N].makeEmpty();
		heap = heap.insert(N.make(70));
		heap = heap.insert(N.make(40));
		heap = heap.insert(N.make(30));
		heap = heap.insert(N.make(60));
		heap = heap.insert(N.make(50));
		heap = heap.insert(N.make(20));
		heap = heap.insert(N.make(10));

		var element N = N.make(1);

		heap, element = heap.remove();
		do core:Out.println!(core:ASCII.formatInt(element.get()));

		heap, element = heap.remove();
		do core:Out.println!(core:ASCII.formatInt(element.get()));

		heap, element = heap.remove();
		do core:Out.println!(core:ASCII.formatInt(element.get()));

		heap, element = heap.remove();
		do core:Out.println!(core:ASCII.formatInt(element.get()));

		heap, element = heap.remove();
		do core:Out.println!(core:ASCII.formatInt(element.get()));

		heap, element = heap.remove();
		do core:Out.println!(core:ASCII.formatInt(element.get()));

		heap, element = heap.remove();
		do core:Out.println!(core:ASCII.formatInt(element.get()));
	}
}
