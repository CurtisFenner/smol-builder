package test;
import core;

union List[#T | #T is core:Eq] is core:Eq] {
	var empty Unit;
	var concatenation core:Pair[#T, List[#T]];

	static make() List[#T] {
		return new(empty = unit);
	}
	
	method head() #T
	requires this is concatenation {
		return this.concatenation.getLeft();
	}

	method isEmpty() Boolean
	ensures return == (this is empty) {
		return this is empty;
	}

	method rest() List[#T]
	requires this is concatenation
	ensures return == this.concatenation.getRight() {
		return this.concatenation.getRight();
	}

	method eq(other List[#T]) Boolean {
		if this is empty {
			return other is empty;
		}
		// other may be empty!
		return this.concatenation == other.concatenation;
	}
}
