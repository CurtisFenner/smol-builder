package test;

class Sorted {
	static sortedFrom(list Li, index Int) Boolean
	ensures return when list.validIndex(index).not() {
		if list.validIndex(index).not() {
			// [] is sorted
			return true;
		}

		var next Int = index + 1;
		if list.validIndex(next).not() {
			// [x] is sorted
			return true;
		}

		var good Boolean = list.get(index) < list.get(next);
		if good.not() {
			return false;
		}
		return Sorted.sortedFrom(list, index + 1);
	}

	static sorted(list Li) Boolean
	ensures (forall (i Int) list.get(i) < list.get(i + 1) when list.validIndex(i).and(list.validIndex(i+1))) == return {
		return Sorted.sortedFrom(list, 0);
	}
}

class Li {
	var a Int;
	var b Int;
	var c Int;

	method size() Int
	ensures (return == 0).or(0 < return) {
		return 3;
	}

	method validIndex(i Int) Boolean
	ensures return == (i == 0).or(i == 1).or(i == 2) {
		return (i == 0).or(i == 1).or(i == 2);
	}

	method get(index Int) Int
	requires this.validIndex(index)
	ensures return == this.a when index == 0
	ensures return == this.b when index == 1
	ensures return == this.c when index == 2 {
		if index == 0 {
			return this.a;
		} elseif index == 1 {
			return this.b;
		}
		return this.c;
	}

	static make(a Int, b Int, c Int) Li
	ensures return.get(0) == a
	ensures return.get(1) == b
	ensures return.get(2) == c {
		return new(a = a, b = b, c = c);
	}
}

class Test {
	static main() Unit {
		var simple Li = Li.make(1, 2, 3);
		assert Sorted.sorted(simple);
	}
}
